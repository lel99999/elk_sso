---
- hosts: elkrh7
  become: yes
  become_method: sudo
  tasks:
#   - name: create epel repo
#     shell: echo $'[epel]\nname=Extra Packages for Enterprise Linux 7\nbaseurl=http://download.fedoraproject.org/pub/epel/7/$basearch\nmetalink=https://mirrors.fedoraproject.org/metalink?repo=epel-7&arch=$basearch\nenabled=1\ngpgcheck=1\ngpgkey=http://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7' | sudo tee /etc/yum.repos.d/epel7.repo

    - name: install epel
      command: yum -y install epel-release

    - name: create nginx repo for rh7
      shell: echo $'[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/mainline/rhel/7/$basearch/\ngpgcheck=0\nenabled=1' | sudo tee /etc/yum.repos.d/ninx.repo

    - name: yum update
      command: yum -y update

    - name: install Nginx and Httpd-tools 
      command: yum -y install nginx httpd-tools
  
#   - name: edit kibanaadmin passwd
#     command: htpasswd -c /etc/nginx/htpasswd.users kibanaadmin

    - htpasswd:
        path: /etc/nginx/passwdfile
        name: kibanaadmin
        password: 'BADP@ssw0rd'
        owner: root
        group: root
        mode: 0640

#   - name: update Nginx configuration
    - replace:
        path: /etc/nginx/nginx.conf
        regexp: '^server{}'
        replace: '' 

#- name: Update /etc/nsswitch.conf
#        lineinfile: dest=/etc/nsswitch.conf regexp="{{ item.regexp }}" line="{{ item.line }}"
#        with_items:
#           - { regexp: '^passwd:.*compat', line: 'passwd: compat ldap' }
#           - { regexp: '^group:.*compat', line: 'group: compat ldap' }
#           - { regexp: '^shadow:.*compat', line: 'shadow: compat ldap' }

    - name: create Nginx Kibana server block
      blockinfile:
        path: /etc/nginx/conf.d/kibana.conf
        block: |
          server {
              listen 80;

              server_name example.com;

              auth_basic "Restricted Access";
              auth_basic_user_file /etc/nginx/htpasswd.users;

              location / {
                  proxy_pass http://localhost:5601;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;        
              }
          }

    - name: start Nginx
      command: systemctl start nginx

    - name: enable Nginx
      command: sytemctl enable nginx

    - name: create Logstash repo
      shell:  echo $'[logstash-2.2]\nname=logstash repository for 2.2 packages\nbaseurl=http://packages.elasticsearch.org/logstash/2.2/centos\ngpgcheck=1\ngpgkey=http://packages.elasticsearch.org/GPG-KEY-elasticsearch\nenabled=1' | sudo tee /etc/yum.repos.d/logstash.repo

    - name: install Logstash
      command: yum -y install logstash

    - name: configure Logstash
      blockinfile:
        path: /etc/logstash/conf.d/02-beats-input.conf
        block: |
          input {
            beats {
              port => 5044
              ssl => true
              ssl_certificate => "/etc/pki/tls/certs/logstash-forwarder.crt"
              ssl_key => "/etc/pki/tls/private/logstash-forwarder.key"
            }
          }

    - name: configure Logstash
      blockinfile:
        path: /etc/logstash/conf.d/10-syslog-filter.conf
        block: |
          filter {
            if [type] == "syslog" {
              grok {
                match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
                add_field => [ "received_at", "%{@timestamp}" ]
                add_field => [ "received_from", "%{host}" ]
              }
              syslog_pri { }
              date {
                match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
              }
            }
          }

    - name: configure Logstash 3
      blockinfile:
        path: /etc/logstash/conf.d/30-elasticsearch-output.conf
        block: |
          output {
            elasticsearch {
              hosts => ["localhost:9200"]
              sniffing => true
              manage_template => false
              index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
              document_type => "%{[@metadata][type]}"
            }
          }

    - name: Test Logstash Configuration
      command: service logstash configtest
      register: logstash_configtest

#   - name: print Logstash Configtest 
    - debug: 
        msg: "{{ logstash_configtest.stdout }}"
        verbosity: 4

    - name: restart Logstash
      command: systemctl restart logstash

    - name: enable Logstash
      command: chkconfig logstash on

    - name: Get Kibana Dashboard
      get_url:
        url: https://download.elastic.co/beats/dashboards/beats-dashboards-1.1.0.zip
        dest: /opt/beats-dashboards-1.1.0.zip
        
